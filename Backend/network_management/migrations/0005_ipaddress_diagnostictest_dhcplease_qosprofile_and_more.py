# Generated by Django 5.1.3 on 2025-05-02 10:34

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("account", "0002_alter_activitylog_options_alter_client_options_and_more"),
        ("internet_plans", "0001_initial"),
        (
            "network_management",
            "0004_alter_hotspotuser_options_alter_router_options_and_more",
        ),
        ("payments", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="IPAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("assigned", "Assigned"),
                            ("reserved", "Reserved"),
                            ("blocked", "Blocked"),
                        ],
                        default="available",
                        max_length=10,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("subnet", models.CharField(max_length=18)),
                ("bandwidth_limit", models.CharField(blank=True, max_length=20)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="account.client",
                    ),
                ),
                (
                    "router",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ip_addresses",
                        to="network_management.router",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DiagnosticTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("ping", "Ping"),
                            ("traceroute", "Traceroute"),
                            ("speedtest", "Speed Test"),
                            ("dns", "DNS Resolution"),
                            ("packet_loss", "Packet Loss"),
                            ("health_check", "Health Check"),
                        ],
                        max_length=20,
                    ),
                ),
                ("target", models.CharField(blank=True, max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("idle", "Idle"),
                            ("running", "Running"),
                            ("success", "Success"),
                            ("error", "Error"),
                        ],
                        default="idle",
                        max_length=10,
                    ),
                ),
                ("result", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "router",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="diagnostic_tests",
                        to="network_management.router",
                    ),
                ),
                (
                    "client_ip",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="diagnostic_tests",
                        to="network_management.ipaddress",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DHCPLease",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mac_address", models.CharField(max_length=17)),
                ("lease_time", models.PositiveIntegerField(default=3600)),
                ("expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="account.client",
                    ),
                ),
                (
                    "ip_address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dhcp_leases",
                        to="network_management.ipaddress",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QoSProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name of the QoS profile",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        help_text="Priority level for traffic",
                        max_length=10,
                    ),
                ),
                (
                    "max_bandwidth",
                    models.CharField(
                        help_text="Maximum bandwidth (e.g., '100M')", max_length=20
                    ),
                ),
                (
                    "min_bandwidth",
                    models.CharField(
                        help_text="Minimum guaranteed bandwidth (e.g., '10M')",
                        max_length=20,
                    ),
                ),
                (
                    "burst_limit",
                    models.CharField(
                        blank=True,
                        help_text="Burst limit for temporary speed boosts",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the QoS profile"
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["name", "priority"], name="network_man_name_525c66_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="BandwidthAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="IP address of the device"),
                ),
                (
                    "mac_address",
                    models.CharField(
                        help_text="MAC address of the device", max_length=17
                    ),
                ),
                (
                    "allocated_bandwidth",
                    models.CharField(
                        help_text="Allocated bandwidth (e.g., '50GB' or 'Unlimited')",
                        max_length=20,
                    ),
                ),
                (
                    "quota",
                    models.CharField(
                        help_text="Data quota (e.g., '50GB' or 'Unlimited')",
                        max_length=20,
                    ),
                ),
                (
                    "used_bandwidth",
                    models.FloatField(default=0, help_text="Used bandwidth in GB"),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        help_text="QoS priority level",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        help_text="Status of the allocation",
                        max_length=10,
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True, help_text="Last usage timestamp", null=True
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Creation timestamp",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Last update timestamp"
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        help_text="Client associated with this allocation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bandwidth_allocations",
                        to="account.client",
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Internet plan for this allocation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="internet_plans.internetplan",
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        blank=True,
                        help_text="Transaction associated with this allocation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payments.transaction",
                    ),
                ),
                (
                    "qos_profile",
                    models.ForeignKey(
                        blank=True,
                        help_text="QoS profile applied to this allocation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="network_management.qosprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SpeedTestHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("download", models.FloatField(blank=True, null=True)),
                ("upload", models.FloatField(blank=True, null=True)),
                ("client_download", models.FloatField(blank=True, null=True)),
                ("client_upload", models.FloatField(blank=True, null=True)),
                ("latency", models.FloatField(blank=True, null=True)),
                ("jitter", models.FloatField(blank=True, null=True)),
                ("server", models.CharField(blank=True, max_length=255)),
                ("isp", models.CharField(blank=True, max_length=255)),
                ("device", models.CharField(blank=True, max_length=255)),
                ("connection_type", models.CharField(blank=True, max_length=50)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "client_ip",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="speed_test_history",
                        to="network_management.ipaddress",
                    ),
                ),
                (
                    "router",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="speed_test_history",
                        to="network_management.router",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subnet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("network_address", models.GenericIPAddressField()),
                ("netmask", models.CharField(max_length=18)),
                ("description", models.TextField(blank=True)),
                ("vlan_id", models.PositiveIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "router",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subnets",
                        to="network_management.router",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BandwidthUsageHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="Usage timestamp"
                    ),
                ),
                (
                    "bytes_used",
                    models.BigIntegerField(help_text="Bytes used in this period"),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(help_text="Duration in seconds"),
                ),
                (
                    "allocation",
                    models.ForeignKey(
                        help_text="Associated bandwidth allocation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_history",
                        to="network_management.bandwidthallocation",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["allocation", "timestamp"],
                        name="network_man_allocat_556bea_idx",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="bandwidthallocation",
            index=models.Index(
                fields=["client", "status"], name="network_man_client__0fb286_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bandwidthallocation",
            index=models.Index(
                fields=["mac_address"], name="network_man_mac_add_fdcc64_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bandwidthallocation",
            index=models.Index(
                fields=["ip_address"], name="network_man_ip_addr_deb256_idx"
            ),
        ),
    ]
